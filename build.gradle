plugins {
  id 'java'
  id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.25'
  id 'jacoco'
  id 'de.zebrajaeger.sendMail' version '0.2.2'
  id 'maven-publish'
  id "org.sonarqube" version "4.4.1.3373"


}
java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}


group = 'org.example'
version = '1.0'

repositories {
  mavenCentral()
}
slack {
  webhookUrl = 'https://hooks.slack.com/services/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'
  message = 'Build completed successfully!'
}
task notifySlack {
  doLast {
    slackSend {
      text = 'Build completed successfully!'
    }
  }
}
task notifySlack {
  doLast {
    def webhookUrl = 'https://hooks.slack.com/services/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'
    def message = '{"text": "Projet publiÃ©! "}'
    def url = new URL(webhookUrl)
    def connection = url.openConnection() as HttpURLConnection
    connection.requestMethod = 'POST'
    connection.setRequestProperty('Content-Type', 'application/json')
    connection.doOutput = true
    connection.outputStream.withWriter { writer -> writer.write(message)}
    def responseCode = connection.responseCode
    println "Response Code: ${responseCode}"

    connection.disconnect()
  }
}

dependencies {
  testImplementation 'io.cucumber:cucumber-java:6.0.0'
  testImplementation 'io.cucumber:cucumber-junit:6.0.0'
  testImplementation 'junit:junit:4.13.2'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      groupId = 'java-api'
      artifactId = 'library'
      version = '1.0.0'
    }
  }
  repositories {
    maven {
      url = uri("https://mymavenrepo.com/repo/bgUdPlEkBqW6qKvzoqdo/")
      credentials {
        username = 'myMavenRepo'
        password = '15091979'
      }
    }
  }
}

cucumberReports {
  outputDir = file('reports/cucumber')
  buildId = '0'
  reports = files('reports/example-report.json')
}

tasks.withType(Test) {
  useJUnit()
  reports {
    junitXml.required.set(true)
    html.required.set(true)
  }
  finalizedBy jacocoTestReport
}
jacocoTestReport {
  dependsOn test
  reports {
    xml.required.set(true)
  }
}
sendMail {
  smtpServer {
    host "smtp.gmail.com"
    port 587
    user "lh_dehili@esi.dz"
    password "nwvr cmov dpsj jzmf"
  }
  mail {
    from "lh_dehili@esi.dz"
    to "lh_dehili@esi.dz"

    body "Successful !"
  }
}
tasks.javadoc {
  options.encoding = 'UTF-8'
  options.addStringOption('Xdoclint:none', '-quiet')
}


sonar {
  properties {
    property "sonar.projectKey", "com.example:h_code"
    property "sonar.projectName", "h_code"
    property "sonar.skipCompile", "true"
    property 'sonar.qualitygate.wait', true
    property "sonar.host.url", "http://197.140.142.82:9000"
    property "sonar.projectVersion", "1.0"
    property "sonar.sources", "src/main/java"
    property "sonar.tests", "src/test/java"
    property "sonar.sourceEncoding", "UTF-8"
    property "sonar.junit.reportPaths", "build/test-results/test"
    property "sonar.jacoco.reportPaths", "build/jacoco/test.exec"
    property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}