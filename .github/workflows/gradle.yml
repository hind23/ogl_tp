name: Java CI with Gradle

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  CI:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Send Slack notification for build start
      - name: Notify Slack - Build Started
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "Build Started for ${{ github.repository }}",
              "attachments": [{
                "color": "#FFFF00",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Event",
                  "value": "${{ github.event_name }}",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Run Tests
        run: ./gradlew test

      - name: Generate Reports
        run: ./gradlew generateCucumberReports

      - name: Upload Test Reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: build/reports/**/*

      - name: Run Static Analysis
        run: ./gradlew sonar

      - name: Check Quality Gates
        shell: bash
        run: |
          # Install jq for JSON parsing
          choco install jq -y

          # Fetch the Quality Gate status from SonarQube
          response=$(curl -s -u ${{ secrets.SONARQUBE_TOKEN }}: \
              "http://197.140.142.82:9000/api/qualitygates/project_status?projectKey=com.example:h_code")

          # Check if the curl command succeeded
          if [ $? -ne 0 ]; then
            echo "Failed to fetch Quality Gate status!"
            exit 1
          fi

          # Parse the JSON response to get the status
          status=$(echo "$response" | jq -r '.projectStatus.status')

          # Check the Quality Gate status
          if [ "$status" = "ERROR" ]; then
            echo "Quality Gate failed!"
            exit 1
          else
            echo "Quality Gate passed!"
          fi

      # Notify Slack about Quality Gate status
      - name: Notify Slack - Quality Gate Status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "Quality Gate Status for ${{ github.repository }}",
              "attachments": [{
                "color": "${{ job.status == 'success' && '#36a64f' || '#ff0000' }}",
                "fields": [{
                  "title": "Status",
                  "value": "${{ job.status }}",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Build Project
        run: ./gradlew build

      - name: Generate Documentation
        run: ./gradlew javadoc

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            build/libs/*.jar
            build/docs/javadoc/**/*

      - name: Deploy to Maven Repository
        run: |
          ./gradlew publish
        env:
          MYMAVENREPO_USERNAME: ${{ secrets.MYMAVENREPO_USERNAME }}
          MYMAVENREPO_PASSWORD: ${{ secrets.REPO_PASS }}

      - name: Send Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: "lh_dehili@esi.dz"
          password: "nwvr cmov dpsj jzmf"
          subject: "Build Status"
          body: "Build completed successfully!"
          to: "lh_dehili@esi.dz"
          from: "lh_dehili@esi.dz"

      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
            channel-id: 'C0875JB5JBZ'
            slack-message: |
              :rocket: Success! :rocket:
        env:
            SLACK_BOT_TOKEN: "xoxp-8255267107573-8270796223473-8283845493541-6559a4e753c5fe01982c43840d8edfb6"